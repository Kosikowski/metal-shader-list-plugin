//
//  ShaderEnumGeneratorCoreTests.swift
//  ShaderListPlugin
//
//  Created by Mateusz Kosikowski on 24/06/2025.
//

// Shared core logic for parsing Metal shaders and generating Swift enums
import Foundation

public enum ShaderType: String, CaseIterable, Equatable {
    case vertex
    case fragment
    case kernel
    case compute
    case unknown

    public var enumName: String {
        switch self {
        case .vertex: return "MTLVertexShader"
        case .fragment: return "MTLFragmentShader"
        case .kernel, .compute: return "MTLComputeShader"
        case .unknown: return "MTLUnknownShader"
        }
    }
}

/// Parses Metal shader source code for top-level function declarations and groups them by shader type.
public func parseShaderFunctions(from text: String) -> [(ShaderType, String)] {
    var results: [(ShaderType, String)] = []
    // Regex: (vertex|fragment|kernel|compute)\s+\w+\s+(\w+)\s*\(
    let pattern = #"\b(vertex|fragment|kernel|compute)\s+\w+\s+(\w+)\s*\("#
    guard let regex = try? NSRegularExpression(pattern: pattern, options: [.anchorsMatchLines]) else {
        return results
    }
    let range = NSRange(text.startIndex..<text.endIndex, in: text)
    regex.enumerateMatches(in: text, options: [], range: range) { match, _, _ in
        guard let match = match,
              let typeRange = Range(match.range(at: 1), in: text),
              let nameRange = Range(match.range(at: 2), in: text) else { return }
        let typeStr = String(text[typeRange])
        let funcName = String(text[nameRange])
        let type = ShaderType(rawValue: typeStr) ?? .unknown
        results.append((type, funcName))
    }
    return results
}

/// Generates Swift enum source code for the discovered shader functions.
public func generateShaderEnums(functionsByType: [ShaderType: Set<String>]) -> String {
    let shaderTypesToEmit = ShaderType.allCases.filter { $0 != .unknown && functionsByType[$0]?.isEmpty == false }
    guard !shaderTypesToEmit.isEmpty else {
        return "// No shaders found.\n"
    }
    var swiftCode = "// Generated by ShaderEnumGenerator\n\nimport Metal\n\n"
    for type in shaderTypesToEmit {
        let enumName = type.enumName
        let functionNames = functionsByType[type]!.sorted()
        swiftCode += "public enum \(enumName): String, CaseIterable {\n"
        for name in functionNames {
            swiftCode += "    case \(name) = \"\(name)\"\n"
        }
        swiftCode += "}\n\n"
    }
    return swiftCode
}

